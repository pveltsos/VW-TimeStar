// ==UserScript==
// @name         TimeStar - Hide Weekend Days 6
// @namespace    http://tampermonkey.net/
// @version      0.6
// @description  Get more MS rewards search points!
// @author       PV
// @match        https://timestar.insperity.com/VWC/*
// @require      http://code.jquery.com/jquery-latest.js
// ==/UserScript==

(function() {
    'use strict';

    let areWeekendRowsHidden = false; // Initial state
    let arePrevWeeksRowsHidden = false; // Initial state
    let areFutureWeeksRowsHidden = false; // Initial state
    let showAlerts = false; // Initial state

    if (showAlerts) { alert("in Fx!"); };


    // Function format rows
    function formatRows() {
        console.log('running formatRows!');
        const dateAttribute = 'data-date';
        const divElements = document.querySelectorAll(`div[${dateAttribute}]`);
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(0, 1, 0, 0); // Set time for tomorrow  to 00:01
        const tomorrow01 = tomorrow;
        const dd = String(today.getDate()).padStart(2, '0');
        const mm = String(today.getMonth() + 1).padStart(2, '0'); // Months are 0-based
        const yyyy = today.getFullYear();
        const formattedToday = mm + '/' + dd + '/' + yyyy;
        console.log(today);
        console.log(tomorrow01);
        console.log(formattedToday);
        divElements.forEach(div => {
            const dateString = div.getAttribute(dateAttribute);
            const date = new Date(dateString);
            date.setHours(23,59,0,0); // for previous days
            const date00 = date; // for today
            console.log(date00);
            // weekend
            if (date.getDay() === 0 || date.getDay() === 6) {
                div.style.backgroundColor = 'Silver';
            }
            // previous rows
            else if (date00 <= today) {
                div.style.backgroundColor = 'AliceBlue';
            }
            // future rows
            else if (date00 >= tomorrow01) {
                div.style.backgroundColor = 'Lavender';
            }
            // today
            else if (dateString === formattedToday) {
                div.style.backgroundColor = 'lightskyblue';
            }
        });
    }


    // Function to hide weekend divs
    function hideWeekendDivs() {
        console.log('running hideWeekendDivs!');
        if (showAlerts) { alert("in hidewkend!"); };
        // Define the attribute name containing the date (e.g., data-date) in US format mm/dd/yyyy
        const dateAttribute = 'data-date';
        // Get all <div> elements with the specified attribute
        const divElements = document.querySelectorAll(`div[${dateAttribute}]`);
        // Iterate through each <div> element
        divElements.forEach(div => {
            const dateString = div.getAttribute(dateAttribute);
            const date = new Date(dateString);
            // Check if the date corresponds to a weekend (Saturday or Sunday)
            if (date.getDay() === 0 || date.getDay() === 6) {
                // Hide the <div> element
                //div.style.display = 'none';
                div.style.backgroundColor = '#FFF5EE';
                div.style.display = areWeekendRowsHidden ? 'none' : 'block';
            }
        });
    }

    function hidePrevDays() {
        console.log('running hidePrevDays!');
        if (showAlerts) { alert("in hideprevdays!"); };
        // Define the attribute name containing the date (e.g., data-date)
        const dateAttribute = 'data-date';
        // Get all <div> elements with the specified attribute
        const divElements = document.querySelectorAll(`div[${dateAttribute}]`);
        // Get today's date
        const today = new Date();
        console.log('today is:' + today);
        // Iterate through each <div> element
        divElements.forEach(div => {
            const dateString = div.getAttribute(dateAttribute);
            const date = new Date(dateString);
            date.setHours(23,59,0,0);
            const date00 = date;
            console.log(date00);
            // Check if the date corresponds to a weekend (Saturday or Sunday)
            if (date00 <= today) {
                // Hide the <div> element
                div.style.display = arePrevWeeksRowsHidden ? 'none' : 'block';
            }
        });
    }

    function hideFutureDays() {
        console.log('running hideFutureDays!');
        if (showAlerts) { alert("in hidefuturedays!"); };
        // Define the attribute name containing the date (e.g., data-date)
        const dateAttribute = 'data-date';
        // Get all <div> elements with the specified attribute
        const divElements = document.querySelectorAll(`div[${dateAttribute}]`);
        // Get today's date
        const today = new Date();
        //const tomorrow = new Date(new Date().getTime() + 24 * 60 * 60 * 1000);
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(0, 1, 0, 0); // Set time to 00:01
        const tomorrow01 = tomorrow;
        // Tomorrow's date in format dd/mm/yyyy: 26/4/2024
        console.log(tomorrow01);
        //tomorrow.setDate(today.getDate() + 1);
        // Iterate through each <div> element
        divElements.forEach(div => {
            const dateString = div.getAttribute(dateAttribute);
            const date = new Date(dateString);
            date.setHours(0,2,0,0);
            const date00 = date;
            console.log(date00);
            // Check if the date corresponds to a weekend (Saturday or Sunday)
            if (date00 >= tomorrow01) {
                // Hide the <div> element
                div.style.display = areFutureWeeksRowsHidden ? 'none' : 'block';
            }
        });
    }

    function toggleToday() {
        console.log('running toggleToday!');
        if (showAlerts) { alert("in today!"); };
        // Define the attribute name containing the date (e.g., data-date)
        const dateAttribute = 'data-date';
        // Get all <div> elements with the specified attribute
        const divElements = document.querySelectorAll(`div[${dateAttribute}]`);
        // Get today's date
        var today = new Date();
        const dd = String(today.getDate()).padStart(2, '0');
        const mm = String(today.getMonth() + 1).padStart(2, '0'); // Months are 0-based
        const yyyy = today.getFullYear();
        const formattedToday = mm + '/' + dd + '/' + yyyy;
        // Iterate through each <div> element
        divElements.forEach(div => {
            const dateString = div.getAttribute(dateAttribute);
            const date = new Date(dateString);
            // Check if the date corresponds to a weekend (Saturday or Sunday)
            if (dateString === formattedToday) {
                // Hide the <div> element
                div.style.backgroundColor = 'lightskyblue';
                //div.style.display = isTodayHidden ? 'none' : 'block';
            }
        });
    }

    function showOnlyToday() {
        console.log('running showOnlyToday!');
        formatRows();
        hideFutureDays();
        hidePrevDays();
    }

    function addBtnWkendRows() {
        console.log('running addBtnWkendRows!');
        if (showAlerts) { alert("in addbtn!"); };

        // Create the toggle button and add it to the top of the page
        const toggleBtnWkndRws = document.createElement('button');
        toggleBtnWkndRws.textContent = 'Toggle Weekend Rows';
        toggleBtnWkndRws.id = 'customBtnWkndRws';
        toggleBtnWkndRws.style.position = 'inherit';
        toggleBtnWkndRws.style.marginRight = '20px';
        toggleBtnWkndRws.classList.add("form_button");
        toggleBtnWkndRws.classList.add("button");
        toggleBtnWkndRws.classList.add("nsp-button");
        toggleBtnWkndRws.classList.add("lg");
        toggleBtnWkndRws.classList.add("radius");
        toggleBtnWkndRws.classList.add("addBtn");
        toggleBtnWkndRws.classList.add("primary");
        toggleBtnWkndRws.style.backgroundColor = 'Silver';
        toggleBtnWkndRws.style.color = 'Black';


        const element = document.querySelector('.action-button-wrap');
        if (element) {
            element.appendChild(toggleBtnWkndRws);
            //document.body.appendChild(toggleButton);
        }

        // Add event listener to the button
        toggleBtnWkndRws.addEventListener('click', () => {
            areWeekendRowsHidden = !areWeekendRowsHidden;
            hideWeekendDivs();
        });
    }

   function addBtnPrevDays() {
        console.log('running addBtnPrevDays!');
       if (showAlerts) { alert("in addbtn!"); };

        // Create the toggle button and add it to the top of the page
        const toggleBtnPrevDays = document.createElement('button');
        toggleBtnPrevDays.textContent = 'Toggle Previous Days';
        toggleBtnPrevDays.id = 'customBtnPrevDays';
        toggleBtnPrevDays.style.position = 'inherit';
        toggleBtnPrevDays.style.marginRight = '20px';
        toggleBtnPrevDays.classList.add("form_button");
        toggleBtnPrevDays.classList.add("button");
        toggleBtnPrevDays.classList.add("nsp-button");
        toggleBtnPrevDays.classList.add("lg");
        toggleBtnPrevDays.classList.add("radius");
        toggleBtnPrevDays.classList.add("addBtn");
        toggleBtnPrevDays.classList.add("primary");
        toggleBtnPrevDays.style.backgroundColor = 'AliceBlue';
        toggleBtnPrevDays.style.color = 'Black';

        const element = document.querySelector('.action-button-wrap');
        if (element) {
            element.appendChild(toggleBtnPrevDays);
        }

        // Add event listener to the button
        toggleBtnPrevDays.addEventListener('click', () => {
            arePrevWeeksRowsHidden = !arePrevWeeksRowsHidden;
            //isTodayHidden =! isTodayHidden;
            hidePrevDays();
        });
    }

   function addBtnFutureDays() {
       console.log('running addBtnFutureDays!');
       if (showAlerts) { alert("in addbtn!"); };

        // Create the toggle button and add it to the top of the page
        const toggleBtnFutureDays = document.createElement('button');
        toggleBtnFutureDays.textContent = 'Toggle Future Days';
        toggleBtnFutureDays.id = 'customBtnFutureDays';
        toggleBtnFutureDays.style.position = 'inherit';
        toggleBtnFutureDays.style.marginRight = '20px';
        toggleBtnFutureDays.classList.add("form_button");
        toggleBtnFutureDays.classList.add("button");
        toggleBtnFutureDays.classList.add("nsp-button");
        toggleBtnFutureDays.classList.add("lg");
        toggleBtnFutureDays.classList.add("radius");
        toggleBtnFutureDays.classList.add("addBtn");
        toggleBtnFutureDays.classList.add("primary");
        toggleBtnFutureDays.style.backgroundColor = 'Lavender';
        toggleBtnFutureDays.style.color = 'Black';

        const element = document.querySelector('.action-button-wrap');
        if (element) {
            element.appendChild(toggleBtnFutureDays);
        }

        // Add event listener to the button
        toggleBtnFutureDays.addEventListener('click', () => {
            areFutureWeeksRowsHidden = !areFutureWeeksRowsHidden;
            //isTodayHidden =! isTodayHidden;
            hideFutureDays();
        });
    }


   function addBtnToday() {
        console.log('running addBtnToday!');
       if (showAlerts) { alert("in addbtn!"); };

        // Create the toggle button and add it to the top of the page
        const toggleBtnToday = document.createElement('button');
        toggleBtnToday.textContent = 'Show Only Today';
        toggleBtnToday.id = 'customBtnToday';
        toggleBtnToday.style.position = 'inherit';
        toggleBtnToday.style.marginRight = '20px';
        toggleBtnToday.classList.add("form_button");
        toggleBtnToday.classList.add("button");
        toggleBtnToday.classList.add("nsp-button");
        toggleBtnToday.classList.add("lg");
        toggleBtnToday.classList.add("radius");
        toggleBtnToday.classList.add("addBtn");
        toggleBtnToday.classList.add("primary");
        toggleBtnToday.style.backgroundColor = 'lightskyblue';
        toggleBtnToday.style.color = 'Black';

        const element = document.querySelector('.action-button-wrap');

        if (element) {
           element.appendChild(toggleBtnToday);
        }

        // Add event listener to the button
        toggleBtnToday.addEventListener('click', () => {
            //isTodayHidden = !isTodayHidden;
            arePrevWeeksRowsHidden = !arePrevWeeksRowsHidden;
            areFutureWeeksRowsHidden = !areFutureWeeksRowsHidden;
            //toggleToday();
            showOnlyToday();
        });
    }

    function addCustomBtns() {
         console.log('running addCustomBtns!');
         if (showAlerts) { alert("in Add Custom Buttons!"); };
        // Execute the function after a 10-second delay
        // setTimeout(hideWeekendDivs, 6000);
        console.log('Adding custom buttons!');

        const btnToday = document.getElementById('customBtnToday');
        if (!btnToday) { setTimeout(addBtnToday, 3900); }

        const btnWkndRws = document.getElementById('customBtnWkndRws');
        if (!btnWkndRws) { setTimeout(addBtnWkendRows, 4000); }

        const btnPrevDay = document.getElementById('customBtnPrevDays');
        if (!btnPrevDay) { setTimeout(addBtnPrevDays, 4100); }

        const btnFutureDay = document.getElementById('customBtnFutureDays');
        if (!btnFutureDay) { setTimeout(addBtnFutureDays, 4200); }
    }

    // Function to run when the page completes loading
    function onPageLoad() {
        console.log('Page loaded!');
        addCustomBtns();
        formatRows();
        // Add your custom logic here
    }

    // Function to run when the page is refreshed or loses focus
    function onRefreshOrBlur() {
         if (showAlerts) { alert("in onRefreshOrBlur!"); };
        console.log('Page refreshed or blurred!');
        addCustomBtns();
        formatRows();
        // Add your custom logic here
    }

    // Execute onPageLoad when the page initially loads
    onPageLoad();

    // Execute onRefreshOrBlur when the page is refreshed or blurred
    window.addEventListener('beforeunload', onRefreshOrBlur);
    window.addEventListener('blur', onRefreshOrBlur);

})();
